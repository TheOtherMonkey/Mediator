<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mediator</name>
    </assembly>
    <members>
        <member name="T:Mediator.HandleRequestsExtensions">
            <summary>
            Extension methods for the <see cref="T:Mediator.IHandleRequests`2"/> interface.
            </summary>
        </member>
        <member name="M:Mediator.HandleRequestsExtensions.HandleRequest``2(Mediator.IHandleRequests{``0,``1},``0)">
            <summary>
            Create the delegate that will be used to executed the <see cref="M:Mediator.IHandleRequests`2.Handle(`0)"/>
            for the identified <paramref name="request"/>.
            </summary>
            <typeparam name="TRequest">The type of request.</typeparam>
            <typeparam name="TResponse">The type response returned from the request.</typeparam>
            <param name="handler">The object responsible for handling the <typeparamref name="TRequest"/>.</param>
            <param name="request">The request being handled.</param>
            <returns>The delegate that will be used to execute <see cref="M:Mediator.IHandleRequests`2.Handle(`0)"/>
            for the <paramref name="request"/>.</returns>
        </member>
        <member name="T:Mediator.Mediator">
            <summary>
            Very simplistic implementation of the Mediator Design Pattern. Allows
            asynchronous CQRS requests to be made that are fulfilled by objects that implement
            the <see cref="T:Mediator.IHandleRequests`2"/> interface.
            Also incorporates an <see cref="T:Aggregator.IAggregateMessages"/> to hand the publish/subscribe metaphor.
            </summary>
        </member>
        <member name="M:Mediator.Mediator.#ctor(Mediator.IServiceFactory,Aggregator.IAggregateMessages)">
            <summary>
            Construct a new instance of the <see cref="T:Mediator.Mediator"/> class.
            </summary>
            <param name="factory">The object that is used wrap the IoC container of choice and used
            to construct the required implementors of the <see cref="T:Mediator.IHandleRequests`2"/>
            interfaces.</param>
            <param name="aggregateMessages">The in-memory event aggregateMessages.</param>
        </member>
        <member name="M:Mediator.Mediator.Request``1(Mediator.IAmARequest{``0})">
            <inheritdoc cref="T:Mediator.IMediate" />
        </member>
        <member name="M:Mediator.Mediator.Send``1(``0)">
            <inheritdoc cref="T:Mediator.IMediate" />
        </member>
        <member name="M:Mediator.Mediator.Publish``1(``0)">
            <inheritdoc cref="T:Mediator.IMediate" />
        </member>
        <member name="T:Mediator.RequestHandlerImpl`2">
            <summary>
            Internal class used to to ensure that the <see cref="T:Mediator.IHandleRequests`2"/>
            that is to be constructed by <see cref="M:Mediator.IServiceFactory.GetInstance``1"/> is constructed using
            the <typeparamref name="TResponse"/> actual (base) type rather than <see cref="T:Mediator.IAmARequest`1"/>.
            </summary>
            <typeparam name="TRequest">The request.</typeparam>
            <typeparam name="TResponse">The response to the request.</typeparam>
        </member>
        <member name="M:Mediator.RequestHandlerImpl`2.Handle(Mediator.IAmARequest{`1},Mediator.IServiceFactory)">
            <summary>
            Make the request to the actual <see cref="T:Mediator.IHandleRequests`2"/>
            implementation.
            </summary>
            <param name="request">The request.</param>
            <param name="factory">The response to that request.</param>
            <returns>The <typeparamref name="TResponse"/> from the <typeparamref name="TRequest"/>.</returns>
        </member>
        <member name="T:Mediator.ServiceFactoryExtensions">
            <summary>
            Static extension methods for the <see cref="T:Mediator.IServiceFactory"/> interface.
            </summary>
        </member>
        <member name="M:Mediator.ServiceFactoryExtensions.GetRequestHandler``2(Mediator.IServiceFactory)">
            <summary>
            Get the <see cref="T:Mediator.IHandleRequests`2"/> for the <typeparamref name="TRequest"/>
            </summary>
            <typeparam name="TRequest">The type of request.</typeparam>
            <typeparam name="TResponse">The type response returned from the request.</typeparam>
            <param name="factory"></param>
            <returns>An instance of the class that implements the relevant <see cref="T:Mediator.IHandleRequests`2"/> interface.</returns>
        </member>
        <member name="M:Mediator.ServiceFactoryExtensions.GetPipeLineBehaviors``2(Mediator.IServiceFactory,``0)">
            <summary>
            Get the list of <see cref="T:Mediator.IPipelineBehaviour`2"/> that have been identified to be executed when
            fulfilling the <typeparamref name="TRequest"/>.
            </summary>
            <typeparam name="TRequest">The type of request.</typeparam>
            <typeparam name="TResponse">The type response returned from the request.</typeparam>
            <param name="factory">The implementation of the <see cref="T:Mediator.IServiceFactory"/>.</param>
            <param name="request">The request being made.</param>
            <returns>The list of <see cref="T:Mediator.IPipelineBehaviour`2"/> that will be executed to fulfill the request.</returns>
        </member>
    </members>
</doc>
